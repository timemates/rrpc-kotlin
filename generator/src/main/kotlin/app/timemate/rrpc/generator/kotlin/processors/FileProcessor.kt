package app.timemate.rrpc.generator.kotlin.processors

import app.timemate.rrpc.generator.kotlin.internal.PoetAnnotations
import app.timemate.rrpc.generator.GeneratorContext
import app.timemate.rrpc.generator.Processor
import app.timemate.rrpc.generator.kotlin.internal.LibClassNames
import app.timemate.rrpc.generator.plugin.api.result.*
import app.timemate.rrpc.proto.schema.RSFile
import app.timemate.rrpc.proto.schema.kotlinPackage
import com.squareup.kotlinpoet.ClassName
import com.squareup.kotlinpoet.FileSpec

public object FileProcessor : Processor<RSFile, FileSpec> {
    override suspend fun GeneratorContext.process(data: RSFile): ProcessResult<FileSpec> {
        val fileName = ClassName(data.kotlinPackage?.value ?: "", data.name)
        val fileSpec = FileSpec.builder(fileName)
        val context = withInstance(fileSpec)
            .withInstance(data)

        fileSpec.addFileComment(GENERATED_COMMENT)
        fileSpec.addAnnotation(PoetAnnotations.Suppress("UNUSED", "RedundantVisibilityModifier"))

        if (data.types.any()) {
            fileSpec.addAnnotation(PoetAnnotations.OptIn(LibClassNames.ExperimentalSerializationApi))
            fileSpec.addImport(LibClassNames.ProtoType.packageName, LibClassNames.ProtoType.simpleName)
        }

        val extendsResult = data.extends.map {
            ExtendProcessor.process(it, context)
        }.flatten().onSuccess {
            fileSpec.addProperties(it.flatten())
        }

        val typesResult = data.types.map {
            TypeProcessor.process(it, context)
        }.flatten().onSuccess { resultList ->
            fileSpec.addFunctions(resultList.mapNotNull { it?.second })
            fileSpec.addTypes(resultList.mapNotNull { it?.first })
        }

        val clientResult = data.services.takeIf { options.isClientGenerationEnabled }?.map {
            ClientProcessor.process(it, context)
        }?.flatten()?.map {
            fileSpec.addTypes(it)
            fileSpec.addImport(LibClassNames.RPCsOptions.packageName, LibClassNames.RPCsOptions.simpleName)
        } ?: ProcessResult.Success(Unit)

        val serverResults = data.services.takeIf { options.isServerGenerationEnabled }?.map {
            ServerProcessor.process(it, context)
        }?.flatten()?.map {
            fileSpec.addTypes(it)
            fileSpec.addImport(LibClassNames.ServiceDescriptor.packageName, LibClassNames.ServiceDescriptor.simpleName)
            fileSpec.addImport(
                LibClassNames.ServiceDescriptor.packageName,
                LibClassNames.ProcedureDescriptor.base.simpleName
            )
            fileSpec.addImport(LibClassNames.RPCsOptions.packageName, LibClassNames.RPCsOptions.simpleName)
        } ?: ProcessResult.Success(Unit)

        return typesResult.zip(clientResult)
            .zip(serverResults)
            .zip(extendsResult)
            .map { fileSpec.build() }
    }

    private val GENERATED_COMMENT = """
        This file is generated by the `timemates/rrpc-generator` library.

        WARNING: DO NOT MODIFY THIS FILE MANUALLY!

        Any changes made to this file will be overwritten when the code is regenerated.
    """.trimIndent()
}