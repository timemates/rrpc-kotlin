[versions]
kotlin = "2.1.10"
kotlinx-coroutines = "1.10.1"
kotlinx-serialization = "1.8.1"
ktor = "3.1.1"
rsocket = "0.20.0"
mockk = "1.13.17"

[libraries]
# kotlinx libraries
kotlinx-coroutines = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinx-coroutines" }
kotlinx-coroutines-test = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "kotlinx-coroutines" }
kotlinx-serialization-json = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlinx-serialization" }
kotlinx-serialization-proto = { module = "org.jetbrains.kotlinx:kotlinx-serialization-protobuf", version.ref = "kotlinx-serialization" }

# Ktor libraries
ktor-server-core = { module = "io.ktor:ktor-server-core", version.ref = "ktor" }
ktor-server-netty = { module = "io.ktor:ktor-server-netty", version.ref = "ktor" }
ktor-server-call-logging = { module = "io.ktor:ktor-server-call-logging", version.ref = "ktor" }
ktor-server-websockets = { module = "io.ktor:ktor-server-websockets", version.ref = "ktor" }
ktor-client-cio = { module = "io.ktor:ktor-client-cio", version.ref = "ktor" }
ktor-client-websockets = { module = "io.ktor:ktor-client-websockets", version.ref = "ktor" }

ktor-server-content-negotiation = { module = "io.ktor:ktor-server-content-negotiation", version.ref = "ktor" }
ktor-serialization-kotlinx-json = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }

# RSocket libraries
rsocket-server = { module = "io.rsocket.kotlin:ktor-server-rsocket", version.ref = "rsocket" }
rsocket-client = { module = "io.rsocket.kotlin:ktor-client-rsocket", version.ref = "rsocket" }
rsocket-core = { module = "io.rsocket.kotlin:rsocket-core", version.ref = "rsocket" }

# Testing Libraries
kotlin-test = { module = "org.jetbrains.kotlin:kotlin-test", version.ref = "kotlin" }
kotlin-test-junit = { module = "org.jetbrains.kotlin:kotlin-test-junit", version.ref = "kotlin" }

mockk = { group = "io.mockk", name = "mockk", version.ref = "mockk" }

# Plugin classpaths
kotlin-plugin = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlin" }
vanniktech-maven-publish = { module = "com.vanniktech.maven.publish:com.vanniktech.maven.publish.gradle.plugin", version.require = "0.25.3" }

[plugins]
# Build Conventions
conventions-multiplatform-core = { id = "multiplatform-convention", version.require = "SNAPSHOT" }
conventions-multiplatform-library = { id = "multiplatform-library-convention", version.require = "SNAPSHOT" }
conventions-jvm-core = { id = "jvm-convention", version.require = "SNAPSHOT" }
conventions-jvm-library = { id = "jvm-library-convention", version.require = "SNAPSHOT" }

# Compiler plugins
kotlinx-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }

# Kotlin
kotlin-jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
kotlin-multiplatform = { id = "org.jetbrains.kotlin.multiplatform", version.ref = "kotlin" }
kotlin-js = { id = "org.jetbrains.kotlin.js", version.ref = "kotlin" }
kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }

# Gradle
gradle-publish = { id = "com.gradle.plugin-publish", version.require = "1.2.1" }